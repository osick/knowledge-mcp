[project]
name = "remote-rag-server"
version = "0.1.0"
description = "Remote RAG API and MCP Server for semantic document search using Qdrant and Azure OpenAI"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Core async web framework
    "fastapi>=0.119.0",
    "uvicorn[standard]>=0.38.0",

    # LangChain for chunking (1.0+ with breaking changes)
    "langchain>=1.0.0",
    "langchain-text-splitters>=0.3.0",

    # Azure OpenAI for embeddings (2.5+ with breaking changes from 1.x)
    "openai>=2.5.0",

    # Qdrant vector database client
    "qdrant-client>=1.15.0",

    # HTTP client for remote document fetching
    "httpx>=0.28.0",

    # MCP protocol server
    "mcp>=1.0.0",

    # Document conversion (same as local MCP)
    "markitdown>=0.1.3",

    # Data validation and settings
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Structured logging
    "structlog>=24.0.0",

    # Python standard library backports/utilities
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=6.0.0",
    "pytest-httpx>=0.34.0",

    # Code quality
    "ruff>=0.8.0",
    "mypy>=1.13.0",

    # Type stubs
    "types-requests>=2.31.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/remote_rag --cov-report=term-missing --cov-report=html"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = []

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.setuptools.packages.find]
where = ["src"]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"
